* Common
#+begin_src emacs-lisp

(use-package prog-mode
  :ensure nil
  :hook (prog-mode . display-line-numbers-mode))

(use-package dape
  :ensure t
  :straight (:host github :repo "svaante/dape")
  :after (eglot python)
  :config
  (add-to-list 'dape-configs
               `(debugpy
                 modes (python-ts-mode python-mode)
                 command "python3"
                 command-args ("-m" "debugpy.adapter")
                 :type "executable"
                 :request "launch"
                 :cwd dape-cwd-fn
                 :program dape-buffer-default))
  (add-hook 'dape-on-stopped-hooks 'dape-info)
  (add-hook 'dape-on-stopped-hooks 'dape-repl)
  (setq dape-key-prefix "\C-x\C-a")
  (setq dape-cwd-fn 'projectile-project-root))

(use-package tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
(use-package treesit-auto
  :after tree-sitter
  :ensure t
  :init
  (setq treesit-auto-install t)
  :config
  (global-treesit-auto-mode))
(use-package tree-sitter-langs
  :after tree-sitter
  :ensure t)

(use-package combobulate
  :after tree-sitter
  :ensure t
  :straight (:host github :repo "mickeynp/combobulate")
  :preface
  (setq combobulate-key-prefix "C-c o")
  :hook ((python-ts-mode . combobulate-mode)
         (js-ts-mode . combobulate-mode)
         (css-ts-mode . combobulate-mode)
         (yaml-ts-mode . combobulate-mode)
         (json-ts-mode . combobulate-mode)
         (typescript-ts-mode . combobulate-mode)
         (tsx-ts-mode . combobulate-mode)))

(use-package editorconfig
  :ensure t)

(use-package direnv
  :ensure t
  :config
  (direnv-mode))

(use-package flycheck
  :bind
  (("C-c e p" . flycheck-previous-error)
   ("C-c e n" . flycheck-next-error)))

(use-package aggressive-indent
  :ensure t
  :hook ((emacs-lisp-mode . aggressive-indent-mode)
         (emacs-lisp-mode . (lambda() (setq fill-column 80
                                       auto-fill-mode 1)))))

(use-package format-all
  :commands format-all-mode
  :hook ((prog-mode . format-all-mode)
         (prog-mode . format-all-ensure-formatter))
  :config
  (setq-default format-all-formatters
                '(("dart" "dart-format"))))

; ensure node and npm installed
(use-package copilot
 :after editorconfig
 :straight (:host github
            :repo "copilot-emacs/copilot.el"
            :branch "main")
 :ensure t
 :hook (prog-mode . copilot-mode)
 :bind (("C-c M-f" . copilot-accept-completion-by-word)
        ("C-c <tab>" . copilot-accept-completion)
        :map copilot-completion-map
        ("C-g" . 'copilot-clear-overlay)
        ("M-P" . 'copilot-previous-completion)
        ("M-N" . 'copilot-next-completion)
        ("<tab>" . 'copilot-accept-completion)
        ("M-f" . 'copilot-accept-completion-by-word)
        ("M-e" . copilot-accept-completion-by-line)
        ("M-n" . copilot-accept-completion-by-line))
 :custom-face (copilot-overlay-face ((t :foreground "silver" :underline t)))
 :config
 (setq copilot-log-max 10000)
 (setq copilot-node-executable
       (executable-find "node")))

;; Currently disabled due to issues with eglot
;; See https://github.com/joaotavora/eglot/discussions/1127
;; (use-package corfu
;;   :custom
;;   ((corfu-auto t)                 ;; Enable auto completion
;;    (corfu-scroll-margin 5)        ;; Use scroll margin
;;    (corfu-min-width 48)
;;    (corfu-separator ?\s))
;;   :bind ((:map corfu-map
;;                ("<enter>" . nil)))
;;   :init
;;   (global-corfu-mode))


#+end_src


* Python

Recommend installing python-lsp-server
pipx install "python-lsp-server[all]" # quotes necessary for zsh
For local Python saves add to .dir-locals.el
((python-mode
 (eval python-isort-on-save-mode)
 (eval blacken-mode)))

#+begin_src emacs-lisp
(use-package python
  :init
  (setq python-fill-docstring-style 'django)
  :config
  (setq eldoc-idle-delay 0.2)
  (when (executable-find "ipython")
    (setq python-shell-interpreter "ipython")))

(use-package blacken
  :demand t
  :after python
  :hook ((python-ts-mode . blacken-mode)
         (python-mode . blacken-mode)))

(use-package python-isort
  :hook ((python-ts-mode . python-isort-on-save-mode)
         (python-mode . python-isort-on-save-mode))
  :ensure t)

(use-package eglot
  :ensure t
  :defer t
  :hook (python-mode . eglot-ensure)
  :bind (("C-c r" . eglot-rename)
         ("C-c C-r" . eglot-rename)))

#+end_src

* Dart
#+begin_src emacs-lisp
; dart-mode lsp-mode lsp-dart lsp-treemacs
(use-package dart-mode
  :ensure t)
(use-package lsp-dart
  :ensure t
  :hook ((dart-mode . lsp)
         (before-save . my-lsp-organize-imports-on-save))  ;; Run organize imports before saving
  :config
  (setq lsp-headerline-breadcrumb-enable nil)
  (defun my-lsp-organize-imports-on-save ()
    "Run 'lsp-organize-imports' before saving Dart files."
    (when (and (bound-and-true-p lsp-mode)
               (derived-mode-p 'dart-mode))
      (lsp-organize-imports))))

(use-package flutter
  :after dart-mode
  :bind (:map dart-mode-map
              ("C-M-x" . #'flutter-run-or-hot-reload)))
#+end_src

* JS
#+begin_src emacs-lisp

(use-package js2-mode
  :mode ("\\.js\\'" . js2-mode)
  :hook
  (js2-mode . ac-js2-mode)
  :config
  (setq js-indent-level 2))

(use-package typescript-mode
  :mode ("\\.htm?\\|\\.tsx$"))

(use-package json-mode
  :ensure t)

#+end_src

* Lisp
#+begin_src emacs-lisp

;;(add-to-list 'load-path "/Applications/slime-2.0")
;(add-to-list 'load-path "/usr/share/emacs22/site-lisp/slime")

;; (require 'slime)
;; (add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
;; (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
;(slime-setup)

;;(setq inferior-lisp-program "sbcl")
;;(setq inferior-lisp-program "/opt/local/bin/sbcl")
;;(setq inferior-lisp-program "/Applications/cmucl-2004-07-25-090-ppc-darwin/bin/lisp")
;;(setq inferior-lisp-program "/opt/local/bin/clisp")
;;(setq lisp-indent-function 'common-lisp-indent-function)

#+end_src


* Other langs
#+begin_src emacs-lisp

(use-package web-mode
  :ensure t
  :mode (("\\.html?\\'" . web-mode)
         ("\\.ejs\\'" . web-mode))
  :config
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-indent-style 2))

(use-package css-mode
  :ensure t
  :mode (("\\.scss$" . css-mode)
         ("\\.css$" . css-mode)))

(setq sql-indent-level 2)

(use-package terraform-mode
  :ensure t
  :hook
  (terraform-mode . terraform-format-on-save-mode))

(use-package markdown-mode
  :ensure t
  :mode ("\\.md\\'" . markdown-mode))

(use-package yaml-mode
  :ensure t)

(use-package dotenv-mode
  :ensure t)

(use-package dockerfile-mode
  :ensure t)

#+end_src
