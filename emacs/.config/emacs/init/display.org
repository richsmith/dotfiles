* Aesthetics
#+begin_src emacs-lisp

(use-package minions
  :ensure t
  :config (minions-mode 1))

(use-package nyan-mode
  :init
  (setq nyan-bar-length 16)
  :config
  (nyan-mode t))
(use-package beacon
  :ensure t)

(use-package nord-theme
  :ensure t)

(use-package atom-one-dark-theme
  :ensure t
  :config
  (load-theme 'atom-one-dark t))

#+end_src

* Display Type
#+begin_src emacs-lisp

(defconst laptop-screen-width 1920)
(defvar machine-type nil)

(defun get-primary-monitor-width ()
  "Get the width of the primary monitor in pixels."
  (let* ((primary-monitor (car (display-monitor-attributes-list)))
         (geometry (cdr (assoc 'geometry primary-monitor)))
         (width (nth 2 geometry)))
    width))

(defun get-machine-type ()
  (let ((width (get-primary-monitor-width)))
    (if (<= width laptop-screen-width)
        'laptop
      'desktop)))

(setq machine-type (get-machine-type))

#+end_src

* Frame Management
These two packages don't seem to work properly.
 
#+begin_src emacs-lisp

(use-package frame-fns
  :straight (frame-fns :type git :host github :repo "emacsmirror/frame-fns"))

(use-package frame-cmds
  :straight (frame-cmds :type git :host github :repo "emacsmirror/frame-cmds")
  :bind (("M-<up>" . move-frame-up)
         ("M-<down>" . move-frame-down)
         ("M-<left>" . move-frame-left)
         ("M-<right>" . move-frame-right)))

#+end_src

* Frame configs
#+begin_src emacs-lisp

(defun split-window-by-column-% (percentages)
  "Split the current window into vertical splits based on PERCENTAGES."
  (when (> (apply '+ percentages) 100)
    (error "Total of percentages exceeds 100"))
  (delete-other-windows) ; Clean slate
  (let ((total-width (window-total-width))
        (remaining-width (window-total-width))
        (split-width 0))
    (dolist (percent (butlast percentages))
      (setq split-width (floor (* total-width (/ percent 100.0))))
      (setq remaining-width (- remaining-width split-width))
      (split-window-horizontally split-width)
      (other-window 1)))
  (other-window 1))

(defconst window-column-layouts
  '(("50/50" . (50 50))
    ("20/40/40" . (20 40 40))
     ("33/33/33" . (33 33 33)))
  "Predefined window layouts by % column splits.")

(bind-and-defun "C-x %" choose-window-layout-by-column-% ()
  "Choose window layout."
  (interactive)
  (let* ((choices (mapcar 'car window-column-layouts))
         (choice (completing-read "Choose layout: " choices nil t)))
    (when choice
      (let ((layout (assoc-default choice window-column-layouts)))
        (if layout
            (split-window-by-column-% layout)
          (message "Layout not found."))))))

#+end_src
